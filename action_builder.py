#!/usr/bin/env python3
"""
üèóÔ∏è Action Builder - Construtor de Sequ√™ncias de A√ß√µes
Servidor constr√≥i sequ√™ncias COMPLETAS com coordenadas, timing, etc.
Cliente N√ÉO tem acesso a essas informa√ß√µes!
"""

class ActionBuilder:
    """
    Construtor de sequ√™ncias de a√ß√µes para o cliente executar

    SERVIDOR CONTROLA:
    - Coordenadas exatas (onde clicar)
    - Sequ√™ncia de a√ß√µes (ordem)
    - Timing entre a√ß√µes (delays)
    - Valida√ß√µes (templates)

    CLIENTE N√ÉO SABE:
    - Onde est√° clicando (recebe coordenadas)
    - O que est√° fazendo (recebe lista)
    - Por que est√° fazendo (apenas executa)
    """

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # COORDENADAS (PROTEGIDAS NO SERVIDOR!)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    COORDINATES = {
        # Chest/Feeding
        "chest_food_slot1": (1306, 858),
        "chest_food_slot2": (1403, 877),
        "eat_button": (1083, 373),

        # Inventory
        "inventory_area_start": (900, 700),
        "inventory_area_end": (1200, 900),

        # Chest drag (cleaning)
        "chest_area_start": (1400, 500),
        "chest_area_end": (1600, 700),

        # Rod slots
        "rod_slot_1": (709, 1005),
        "rod_slot_2": (805, 1005),
        "rod_slot_3": (899, 1005),
        "rod_slot_4": (992, 1005),
        "rod_slot_5": (1092, 1005),
        "rod_slot_6": (1188, 1005),
    }

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # TIMING (PROTEGIDO NO SERVIDOR!)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    TIMING = {
        "chest_open_wait": 1.5,      # Espera ap√≥s abrir ba√∫
        "after_click_wait": 0.8,     # Espera ap√≥s clicar
        "eat_click_interval": 0.3,   # Intervalo entre cliques em "eat"
        "before_close_wait": 0.5,    # Espera antes de fechar ba√∫
        "drag_duration": 0.5,        # Dura√ß√£o do arraste
    }

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # BUILDERS DE SEQU√äNCIAS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @classmethod
    def build_feeding_sequence(cls, clicks: int = 5) -> dict:
        """
        Construir sequ√™ncia de alimenta√ß√£o

        Cliente N√ÉO sabe:
        - Onde est√° o ba√∫
        - Onde est√° a comida
        - Onde est√° o bot√£o "eat"
        - Quantos cliques fazer

        Args:
            clicks: N√∫mero de cliques em "eat" (padr√£o: 5)

        Returns:
            Comando completo para o cliente executar cegamente
        """
        return {
            "cmd": "sequence",
            "name": "feeding",
            "description": "Alimenta√ß√£o autom√°tica",
            "actions": [
                # 1. Abrir ba√∫
                {
                    "type": "key",
                    "key": "esc",
                    "comment": "Abrir ba√∫"
                },

                # 2. Aguardar ba√∫ abrir
                {
                    "type": "wait",
                    "duration": cls.TIMING["chest_open_wait"]
                },

                # 3. Validar ba√∫ aberto (opcional)
                # {
                #     "type": "template",
                #     "name": "chest_open",
                #     "timeout": 3
                # },

                # 4. Clicar na comida (slot 1)
                {
                    "type": "click",
                    "x": cls.COORDINATES["chest_food_slot1"][0],
                    "y": cls.COORDINATES["chest_food_slot1"][1],
                    "comment": "Pegar comida do ba√∫"
                },

                # 5. Aguardar
                {
                    "type": "wait",
                    "duration": cls.TIMING["after_click_wait"]
                },

                # 6. Clicar em "eat" N vezes
                {
                    "type": "click",
                    "x": cls.COORDINATES["eat_button"][0],
                    "y": cls.COORDINATES["eat_button"][1],
                    "repeat": clicks,
                    "interval": cls.TIMING["eat_click_interval"],
                    "comment": f"Clicar em 'eat' {clicks} vezes"
                },

                # 7. Aguardar antes de fechar
                {
                    "type": "wait",
                    "duration": cls.TIMING["before_close_wait"]
                },

                # 8. Fechar ba√∫
                {
                    "type": "key",
                    "key": "esc",
                    "comment": "Fechar ba√∫"
                }
            ]
        }

    @classmethod
    def build_cleaning_sequence(cls) -> dict:
        """
        Construir sequ√™ncia de limpeza de invent√°rio

        Cliente N√ÉO sabe:
        - √Årea do invent√°rio
        - √Årea do ba√∫
        - Como fazer drag

        Returns:
            Comando completo para o cliente executar cegamente
        """
        return {
            "cmd": "sequence",
            "name": "cleaning",
            "description": "Limpeza de invent√°rio",
            "actions": [
                # 1. Abrir ba√∫
                {
                    "type": "key",
                    "key": "esc",
                    "comment": "Abrir ba√∫"
                },

                # 2. Aguardar ba√∫ abrir
                {
                    "type": "wait",
                    "duration": cls.TIMING["chest_open_wait"]
                },

                # 3. Arrastar itens do invent√°rio para ba√∫
                {
                    "type": "drag",
                    "from_x": cls.COORDINATES["inventory_area_start"][0],
                    "from_y": cls.COORDINATES["inventory_area_start"][1],
                    "to_x": cls.COORDINATES["chest_area_start"][0],
                    "to_y": cls.COORDINATES["chest_area_start"][1],
                    "duration": cls.TIMING["drag_duration"],
                    "comment": "Arrastar itens para ba√∫"
                },

                # 4. Aguardar
                {
                    "type": "wait",
                    "duration": cls.TIMING["before_close_wait"]
                },

                # 5. Fechar ba√∫
                {
                    "type": "key",
                    "key": "esc",
                    "comment": "Fechar ba√∫"
                }
            ]
        }

    @classmethod
    def build_rod_switch_sequence(cls, rod_slot: int) -> dict:
        """
        Construir sequ√™ncia de troca de vara

        Cliente N√ÉO sabe:
        - Posi√ß√£o dos slots de vara (1-6)

        Args:
            rod_slot: N√∫mero do slot (1-6)

        Returns:
            Comando completo para o cliente executar cegamente
        """
        if rod_slot not in range(1, 7):
            raise ValueError(f"rod_slot deve ser 1-6, recebido: {rod_slot}")

        slot_key = f"rod_slot_{rod_slot}"
        x, y = cls.COORDINATES[slot_key]

        return {
            "cmd": "sequence",
            "name": "rod_switch",
            "description": f"Trocar para vara #{rod_slot}",
            "actions": [
                # 1. Clicar no slot da vara
                {
                    "type": "click",
                    "x": x,
                    "y": y,
                    "comment": f"Clicar no slot da vara {rod_slot}"
                },

                # 2. Aguardar equipar
                {
                    "type": "wait",
                    "duration": 0.5
                }
            ]
        }

    @classmethod
    def build_custom_sequence(cls, actions: list) -> dict:
        """
        Construir sequ√™ncia customizada

        Permite servidor criar sequ√™ncias din√¢micas

        Args:
            actions: Lista de a√ß√µes

        Returns:
            Comando completo
        """
        return {
            "cmd": "sequence",
            "name": "custom",
            "description": "Sequ√™ncia customizada",
            "actions": actions
        }

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # HELPERS - A√á√ïES AT√îMICAS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @staticmethod
    def action_click(x: int, y: int, repeat: int = 1, interval: float = 0.1) -> dict:
        """Criar a√ß√£o de clique"""
        return {
            "type": "click",
            "x": x,
            "y": y,
            "repeat": repeat,
            "interval": interval
        }

    @staticmethod
    def action_wait(duration: float) -> dict:
        """Criar a√ß√£o de espera"""
        return {
            "type": "wait",
            "duration": duration
        }

    @staticmethod
    def action_key(key: str) -> dict:
        """Criar a√ß√£o de tecla"""
        return {
            "type": "key",
            "key": key
        }

    @staticmethod
    def action_drag(from_x: int, from_y: int, to_x: int, to_y: int, duration: float = 0.5) -> dict:
        """Criar a√ß√£o de arraste"""
        return {
            "type": "drag",
            "from_x": from_x,
            "from_y": from_y,
            "to_x": to_x,
            "to_y": to_y,
            "duration": duration
        }

    @staticmethod
    def action_template(name: str, timeout: float = 5, confidence: float = 0.8) -> dict:
        """Criar a√ß√£o de detec√ß√£o de template"""
        return {
            "type": "template",
            "name": name,
            "timeout": timeout,
            "confidence": confidence
        }


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# EXEMPLO DE USO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

if __name__ == "__main__":
    print("\nüèóÔ∏è Demonstra√ß√£o do ActionBuilder\n")
    print("="*60)

    # Exemplo 1: Feeding
    print("\n1Ô∏è‚É£ Sequ√™ncia de Feeding:")
    feeding = ActionBuilder.build_feeding_sequence(clicks=5)
    print(f"   A√ß√µes: {len(feeding['actions'])}")
    print(f"   Nome: {feeding['name']}")
    print(f"   Descri√ß√£o: {feeding['description']}")

    # Exemplo 2: Cleaning
    print("\n2Ô∏è‚É£ Sequ√™ncia de Cleaning:")
    cleaning = ActionBuilder.build_cleaning_sequence()
    print(f"   A√ß√µes: {len(cleaning['actions'])}")
    print(f"   Nome: {cleaning['name']}")

    # Exemplo 3: Rod Switch
    print("\n3Ô∏è‚É£ Sequ√™ncia de Troca de Vara:")
    rod_switch = ActionBuilder.build_rod_switch_sequence(rod_slot=3)
    print(f"   A√ß√µes: {len(rod_switch['actions'])}")
    print(f"   Nome: {rod_switch['name']}")

    # Exemplo 4: Custom
    print("\n4Ô∏è‚É£ Sequ√™ncia Customizada:")
    custom = ActionBuilder.build_custom_sequence([
        ActionBuilder.action_key("esc"),
        ActionBuilder.action_wait(1.0),
        ActionBuilder.action_click(100, 200),
    ])
    print(f"   A√ß√µes: {len(custom['actions'])}")

    print("\n" + "="*60)
    print("‚úÖ ActionBuilder pronto para uso no servidor!")
    print("\nüîí Cliente N√ÉO tem acesso a coordenadas ou sequ√™ncias!")
